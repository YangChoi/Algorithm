# 분할 정복
# 가장 유명한 재귀적 기술
# 문제를 분할 정복 전략으로 푸는 방법?
# 1. 기본 단계 해결. 이 부분은 가능한 한 간단한 문제여야함
# 2. 문제가 기본 단계가 될 때까지 나누거나 작게 만듦


# 예시
# 배열에 있는 숫자들을 모두 더해 합계 구하기 > 반복 이용 

def sum(arr):
    total = 0
    for x in arr:
        total += x
    return total

print(sum([1, 2, 3, 4]))

# 재귀를 사용해서 합계를 구하려면?
# 1. 기본 단계 찾기 
# 가장 간단한 배열은? 
# 만약 원소 개수 0개이거나 1개인 배열 받으면 합계구하기는 간단

# 2. 재귀함수 호출 때 마다 호출 대상되는 배열의 크기가 점점 감소해야함
# 문제의 크기를 줄이기는?
# 더 작은 배열을 sum 함수에 넘기기 
# 즉, 문제의 크기를 줄였다는 것! (원소 3개를 넘기는 것보단 원소 2개를 넘기는 것이 더 작음)
# 재귀에서는 상태를 추적한다는 점을 명심!
# > 재귀에서는 부분적으로 실행된 함수 호출의 상태를 모두 저장함 

# 함수형 프로그래밍 
# 반복문으로 해결할 수 있는데 왜 굳이 재귀적으로 ?
# 함수형 프로그래밍 언어에는 반복문이 없음 > 무조건 재귀 함수를 사용해야함
